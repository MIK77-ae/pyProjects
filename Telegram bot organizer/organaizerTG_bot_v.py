import telebot
from telebot import types as tg_types
from datetime import datetime, timedelta
import pytz
import threading
import time
import json
from collections import defaultdict
import calendar
import requests
import random

# --- –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã ---
BOT_TOKEN = '–≤—Å—Ç–∞–≤—å—Ç–µ —Ç–æ–∫–µ–Ω —Å–≤–æ–µ–≥–æ –±–æ—Ç–∞ (–í—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –µ–≥–æ —á–µ—Ä–µ–∑ @BotFather –≤ –¢–µ–ª–µ–≥—Ä–∞–º)'
WEATHER_API_KEY = '–≤—Å—Ç–∞–≤—å—Ç–µ —Ç–æ–∫–µ–Ω —Å–≤–æ–µ–≥–æ API (–í—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –µ–≥–æ –Ω–∞ —Å–∞–∏ÃÜ—Ç–µ api.openweathermap.org)'
EXCHANGE_API_KEY = '–≤—Å—Ç–∞–≤—å—Ç–µ —Ç–æ–∫–µ–Ω —Å–≤–æ–µ–≥–æ API (–í—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –µ–≥–æ –Ω–∞ —Å–∞–∏ÃÜ—Ç–µ exchangerate-api.com)('

# –û—Å–Ω–æ–≤–Ω—ã–µ –≤–∞–ª—é—Ç—ã –∏ –≥–æ—Ä–æ–¥–∞
CURRENCIES = ['USD', 'EUR', 'GBP', 'JPY', 'CNY', 'RUB', 'AUD', 'CAD']
RUSSIAN_CITIES = ["–ú–æ—Å–∫–≤–∞", "–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥", "–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫", "–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥", "–ö–∞–∑–∞–Ω—å"]
WORLD_CAPITALS = ["–í–∞—à–∏–Ω–≥—Ç–æ–Ω", "–ü–µ–∫–∏–Ω", "–õ–æ–Ω–¥–æ–Ω", "–¢–æ–∫–∏–æ", "–ë–µ—Ä–ª–∏–Ω", "–ü–∞—Ä–∏–∂", "–°–µ—É–ª", "–†–∏–º", "–û—Ç—Ç–∞–≤–∞", "–ù—å—é-–î–µ–ª–∏"]

# --- –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö ---
DATA_FILE = "C:/PythonProjects/pythonProject/Telegram bot organizer/reminders.json"

bot = telebot.TeleBot(BOT_TOKEN)

# --- –ö–ª–∞—Å—Å –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π ---
class ReminderSystem:
    def __init__(self):
        self.reminders = defaultdict(list)
        self.load_reminders()

    def load_reminders(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –∏–∑ —Ñ–∞–π–ª–∞."""
        try:
            with open(DATA_FILE, "r", encoding="utf-8") as file:
                self.reminders = defaultdict(list, json.load(file))
            print("–î–∞–Ω–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –∑–∞–≥—Ä—É–∂–µ–Ω—ã.")
        except FileNotFoundError:
            print("–§–∞–π–ª —Å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è–º–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, —Å–æ–∑–¥–∞–µ—Ç—Å—è –Ω–æ–≤—ã–π.")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π: {e}")

    def save_reminders(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –≤ —Ñ–∞–π–ª."""
        try:
            with open(DATA_FILE, "w", encoding="utf-8") as file:
                json.dump(self.reminders, file, ensure_ascii=False, indent=4)
            print("–î–∞–Ω–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π: {e}")

    def add_reminder(self, user_id, text, event_time):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è."""
        self.reminders[user_id].append({"text": text, "time": event_time.isoformat()})
        self.save_reminders()

    def get_reminders(self, user_id):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
        return self.reminders.get(user_id, [])

    def delete_reminder(self, user_id, index):
        """–£–¥–∞–ª–µ–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ –∏–Ω–¥–µ–∫—Å—É."""
        if user_id in self.reminders and 0 <= index < len(self.reminders[user_id]):
            del self.reminders[user_id][index]
            self.save_reminders()

    def notify_reminders(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ —Å–æ–±—ã—Ç–∏—è—Ö."""
        while True:
            now = datetime.now(pytz.timezone("Europe/Moscow"))
            for user_id, reminders in list(self.reminders.items()):
                for reminder in reminders:
                    reminder_time = datetime.fromisoformat(reminder['time'])
                    if reminder_time.tzinfo is None:
                        reminder_time = pytz.timezone("Europe/Moscow").localize(reminder_time)
                    time_to_event = reminder_time - now

                    if timedelta(minutes=0) <= time_to_event <= timedelta(minutes=30):
                        bot.send_message(user_id, f"üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ —Å–æ–±—ã—Ç–∏–∏: {reminder['text']} –≤ {reminder_time.strftime('%H:%M')}!")
                        self.delete_reminder(user_id, reminders.index(reminder))

            time.sleep(30)

# –°–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ —Å–∏—Å—Ç–µ–º—ã –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
reminder_system = ReminderSystem()

# --- –ù–∞—É—á–Ω—ã–µ —Ñ–∞–∫—Ç—ã ---
SCIENTIFIC_FACTS = [
    "üß¨ 99% –î–ù–ö —á–µ–ª–æ–≤–µ–∫–∞ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å –î–ù–ö —à–∏–º–ø–∞–Ω–∑–µ",
    "üåç –ó–µ–º–ª—è —Å–æ–≤–µ—Ä—à–∞–µ—Ç –ø–æ–ª–Ω—ã–π –æ–±–æ—Ä–æ—Ç –≤–æ–∫—Ä—É–≥ —Å–≤–æ–µ–π –æ—Å–∏ –∑–∞ 23 —á–∞—Å–∞ 56 –º–∏–Ω—É—Ç –∏ 4 —Å–µ–∫—É–Ω–¥—ã",
    "‚ö° –ú–æ–ª–Ω–∏—è –Ω–∞–≥—Ä–µ–≤–∞–µ—Ç –≤–æ–∑–¥—É—Ö –¥–æ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–µ, –≤ –ø—è—Ç—å —Ä–∞–∑ –ø—Ä–µ–≤—ã—à–∞—é—â–µ–π —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–µ –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–∏ –°–æ–ª–Ω—Ü–∞",
    "üß† –ú–æ–∑–≥ —á–µ–ª–æ–≤–µ–∫–∞ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —ç–ª–µ–∫—Ç—Ä–∏—á–µ—Å—Ç–≤–∞, —á—Ç–æ–±—ã –∑–∞–∂–µ—á—å –º–∞–ª–µ–Ω—å–∫—É—é –ª–∞–º–ø–æ—á–∫—É",
    "ü¶à –ê–∫—É–ª—ã —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–ª–∏ –Ω–∞ –ó–µ–º–ª–µ —Ä–∞–Ω—å—à–µ, —á–µ–º –¥–µ—Ä–µ–≤—å—è",
    "üåä –û–∫–µ–∞–Ω—ã —Å–æ–¥–µ—Ä–∂–∞—Ç 99% –∂–∏–∑–Ω–µ–Ω–Ω–æ–≥–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞ –Ω–∞ –ó–µ–º–ª–µ",
    "ü¶ï –¢–∏—Ä–∞–Ω–Ω–æ–∑–∞–≤—Ä –†–µ–∫—Å –∂–∏–ª –±–ª–∏–∂–µ –∫ –Ω–∞—à–µ–º—É –≤—Ä–µ–º–µ–Ω–∏, —á–µ–º –∫ –≤—Ä–µ–º–µ–Ω–∏ —Å—Ç–µ–≥–æ–∑–∞–≤—Ä–∞",
    "üí´ –í –Ω–∞—à–µ–π –≥–∞–ª–∞–∫—Ç–∏–∫–µ –ú–ª–µ—á–Ω—ã–π –ü—É—Ç—å –æ–∫–æ–ª–æ 400 –º–∏–ª–ª–∏–∞—Ä–¥–æ–≤ –∑–≤–µ–∑–¥",
    "üß™ –û–¥–∏–Ω –≥—Ä–∞–º–º –î–ù–ö –º–æ–∂–µ—Ç —Ö—Ä–∞–Ω–∏—Ç—å 215 –ø–µ—Ç–∞–±–∞–π—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏",
    "üî¨ –í –æ–¥–Ω–æ–π –∫–∞–ø–ª–µ –≤–æ–¥—ã —Å–æ–¥–µ—Ä–∂–∏—Ç—Å—è –±–æ–ª—å—à–µ –∞—Ç–æ–º–æ–≤, —á–µ–º –∑–≤–µ–∑–¥ –≤–æ –≤—Å–µ–π –Ω–∞—à–µ–π –≥–∞–ª–∞–∫—Ç–∏–∫–µ"
]

# –¢–µ–∫—Å—Ç —Å–ø—Ä–∞–≤–∫–∏
HELP_TEXT = """
üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç-–æ—Ä–≥–∞–Ω–∞–π–∑–µ—Ä!

üìÖ **–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤—Å—Ç—Ä–µ—á–∞–º–∏**:
‚Ä¢ –°–æ–∑–¥–∞—Ç—å –≤—Å—Ç—Ä–µ—á—É - –∫–Ω–æ–ø–∫–∞ "üìÖ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –≤—Å—Ç—Ä–µ—á—É"
‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä –≤—Å—Ç—Ä–µ—á - –∫–Ω–æ–ø–∫–∞ "üìã –ú–æ–∏ –≤—Å—Ç—Ä–µ—á–∏"
‚Ä¢ –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –≤—Å—Ç—Ä–µ—á–∏ - –∫–æ–º–∞–Ω–¥–∞ /edit

üí± **–û–±–º–µ–Ω –≤–∞–ª—é—Ç**:
‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –≤–∞–ª—é—Ç—ã: USD, EUR, GBP, JPY, CNY, RUB, AUD, CAD
‚Ä¢ –ê–∫—Ç—É–∞–ª—å–Ω—ã–µ –∫—É—Ä—Å—ã –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
‚Ä¢ –¢–æ—á–Ω—ã–µ —Ä–∞—Å—á–µ—Ç—ã —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∫–æ–ø–µ–µ–∫

üå° **–ü–æ–≥–æ–¥–∞**:
‚Ä¢ –ü–æ–≥–æ–¥–∞ –≤ –ª—é–±–æ–º –≥–æ—Ä–æ–¥–µ –º–∏—Ä–∞
‚Ä¢ –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞, –≤–ª–∞–∂–Ω–æ—Å—Ç—å, –æ–ø–∏—Å–∞–Ω–∏–µ
‚Ä¢ –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –≥–æ—Ä–æ–¥–∞ –≤ –±—ã—Å—Ç—Ä–æ–º –¥–æ—Å—Ç—É–ø–µ

‚ö°Ô∏è **–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ**:
‚Ä¢ –¢–æ—á–Ω–æ–µ –≤—Ä–µ–º—è –∏ –¥–∞—Ç–∞ (MSK)
‚Ä¢ –ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ –Ω–∞—É—á–Ω—ã–µ —Ñ–∞–∫—Ç—ã
‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è

üÜò **–ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å?**
‚Ä¢ Telegram: @OrganizerSupportBot
‚Ä¢ Email: support@organizerbot.ru
‚Ä¢ –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: 24/7

–ö–æ–º–∞–Ω–¥—ã:
/start - –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞
/help - –≠—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
/edit - –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å—Ç—Ä–µ—á
"""

# --- –ö–æ–º–∞–Ω–¥—ã –∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ ---
@bot.message_handler(commands=['start', 'help'])
def send_help(message):
    """–í—ã–≤–æ–¥ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è –∏ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é."""
    if message.text == '/start':
        welcome_text = (
            "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç-–æ—Ä–≥–∞–Ω–∞–π–∑–µ—Ä!\n\n"
            "üîπ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º\n"
            "üîπ –ö–æ–º–∞–Ω–¥–∞ /help –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–π —Å–ø—Ä–∞–≤–∫–∏\n"
            "üîπ –°–ª—É–∂–±–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏: @OrganizerSupportBot\n"
        )
        markup = tg_types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add("üìÖ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –≤—Å—Ç—Ä–µ—á—É", "üìã –ú–æ–∏ –≤—Å—Ç—Ä–µ—á–∏")
        markup.add("üå° –ü–æ–≥–æ–¥–∞", "üí± –û–±–º–µ–Ω –≤–∞–ª—é—Ç")
        markup.add("‚è∞ –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è", "üß† –ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π —Ñ–∞–∫—Ç")
        bot.send_message(message.chat.id, welcome_text, reply_markup=markup)
    elif message.text == '/help':
        bot.send_message(message.chat.id, HELP_TEXT, parse_mode='Markdown')

@bot.message_handler(func=lambda message: message.text == "‚è∞ –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è")
def send_time(message):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –∏ –¥–∞—Ç—ã."""
    now = datetime.now(pytz.timezone("Europe/Moscow"))
    bot.send_message(message.chat.id, f"üìÖ {now.strftime('%d.%m.%Y')} üïí {now.strftime('%H:%M:%S')} (–ø–æ –ú–æ—Å–∫–≤–µ)")

@bot.message_handler(func=lambda message: message.text == "üå° –ü–æ–≥–æ–¥–∞")
def weather_start(message):
    """–ù–∞—á–∞–ª–æ –¥–∏–∞–ª–æ–≥–∞ –æ –ø–æ–≥–æ–¥–µ."""
    markup = tg_types.InlineKeyboardMarkup(row_width=2)
    
    for city in RUSSIAN_CITIES + WORLD_CAPITALS:
        markup.add(tg_types.InlineKeyboardButton(city, callback_data=f"weather_{city}"))
    markup.add(tg_types.InlineKeyboardButton("–í–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥ –≤—Ä—É—á–Ω—É—é", callback_data="weather_manual"))
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –≤—Ä—É—á–Ω—É—é:", reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data.startswith('weather_'))
def weather_callback(call):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –≥–æ—Ä–æ–¥–∞ –¥–ª—è –ø–æ–≥–æ–¥—ã."""
    if call.data == "weather_manual":
        bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞:")
        bot.register_next_step_handler(call.message, process_weather_input)
    else:
        city = call.data.split('_')[1]
        send_weather(call.message, city)

def process_weather_input(message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –≥–æ—Ä–æ–¥–∞ –≤—Ä—É—á–Ω—É—é."""
    send_weather(message, message.text.strip())

def send_weather(message, city):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–≥–æ–¥–µ."""
    url = f"http://api.openweathermap.org/data/2.5/weather?q={city}&appid={WEATHER_API_KEY}&units=metric&lang=ru"
    try:
        response = requests.get(url).json()
        weather_data = (
            f"üå°Ô∏è –ü–æ–≥–æ–¥–∞ –≤ {city}:\n"
            f"–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {response['main']['temp']}¬∞C\n"
            f"–û—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫: {response['main']['feels_like']}¬∞C\n"
            f"–í–ª–∞–∂–Ω–æ—Å—Ç—å: {response['main']['humidity']}%\n"
            f"–û–ø–∏—Å–∞–Ω–∏–µ: {response['weather'][0]['description'].capitalize()}"
        )
        bot.send_message(message.chat.id, weather_data)
    except KeyError:
        bot.send_message(message.chat.id, "–ì–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    except Exception as e:
        bot.send_message(message.chat.id, f"–û—à–∏–±–∫–∞: {str(e)}")

@bot.message_handler(func=lambda message: message.text == "üìÖ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –≤—Å—Ç—Ä–µ—á—É")
def plan_meeting(message):
    """–ù–∞—á–∞–ª–æ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Å—Ç—Ä–µ—á–∏."""
    now = datetime.now(pytz.timezone("Europe/Moscow"))
    send_calendar(message.chat.id, now.year, now.month)

def send_calendar(chat_id, year, month):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –∫–∞–ª–µ–Ω–¥–∞—Ä—è."""
    markup = tg_types.InlineKeyboardMarkup(row_width=7)
    
    # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å –º–µ—Å—è—Ü–µ–º –∏ –≥–æ–¥–æ–º
    markup.row(tg_types.InlineKeyboardButton(
        f'{calendar.month_name[month]} {year}',
        callback_data='ignore'
    ))
    
    # –î–Ω–∏ –Ω–µ–¥–µ–ª–∏
    days_of_week = ['–ü–Ω', '–í—Ç', '–°—Ä', '–ß—Ç', '–ü—Ç', '–°–±', '–í—Å']
    week_row = [tg_types.InlineKeyboardButton(day, callback_data='ignore') for day in days_of_week]
    markup.row(*week_row)
    
    # –ö–∞–ª–µ–Ω–¥–∞—Ä–Ω–∞—è —Å–µ—Ç–∫–∞
    month_calendar = calendar.monthcalendar(year, month)
    for week in month_calendar:
        row = []
        for day in week:
            if day == 0:
                row.append(tg_types.InlineKeyboardButton(" ", callback_data='ignore'))
            else:
                row.append(tg_types.InlineKeyboardButton(
                    str(day),
                    callback_data=f'calendar_{year}_{month}_{day}'
                ))
        markup.row(*row)
    
    # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    nav_row = []
    prev_month = month - 1 if month > 1 else 12
    prev_year = year if month > 1 else year - 1
    next_month = month + 1 if month < 12 else 1
    next_year = year if month < 12 else year + 1
    
    nav_row.append(tg_types.InlineKeyboardButton(
        "<<",
        callback_data=f'nav_{prev_year}_{prev_month}'
    ))
    nav_row.append(tg_types.InlineKeyboardButton(
        ">>",
        callback_data=f'nav_{next_year}_{next_month}'
    ))
    markup.row(*nav_row)
    
    bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É:", reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data.startswith(('calendar_', 'nav_')))
def calendar_callback(call):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–∞–ª–µ–Ω–¥–∞—Ä—å."""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç—Å—è –ª–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–∞—è –≤—Å—Ç—Ä–µ—á–∞
        editing_meeting = getattr(calendar_callback, 'editing_meeting', None)
        
        prefix, *data = call.data.split('_')
        if prefix == 'nav':
            year, month = map(int, data)
            send_calendar(call.message.chat.id, year, month)
        elif prefix == 'calendar':
            year, month, day = map(int, data)
            selected_date = datetime(year, month, day)
            
            if editing_meeting is not None:
                # –ï—Å–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –≤—Å—Ç—Ä–µ—á—É, –ø–µ—Ä–µ–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å
                send_time_picker(call.message.chat.id, selected_date, editing_meeting)
                # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                calendar_callback.editing_meeting = None
            else:
                # –ï—Å–ª–∏ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –≤—Å—Ç—Ä–µ—á—É
                send_time_picker(call.message.chat.id, selected_date)
    except Exception as e:
        bot.send_message(call.message.chat.id, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")

def send_time_picker(chat_id, date, editing_meeting=None):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏."""
    markup = tg_types.InlineKeyboardMarkup(row_width=4)
    hours = []
    for hour in range(0, 24):
        callback_data = (f'time_{date.strftime("%Y-%m-%d")}_{hour}'
                        f'_{editing_meeting if editing_meeting is not None else "new"}')
        hours.append(tg_types.InlineKeyboardButton(
            f"{hour:02d}:00",
            callback_data=callback_data
        ))
    for i in range(0, len(hours), 4):
        markup.row(*hours[i:i+4])
    bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è:", reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data.startswith('time_'))
def time_callback(call):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏."""
    try:
        _, date_str, hour, meeting_status = call.data.split('_')
        selected_datetime = datetime.strptime(f"{date_str} {hour}", "%Y-%m-%d %H")
        
        if meeting_status == "new":
            # –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –≤—Å—Ç—Ä–µ—á–∏
            bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –≤—Å—Ç—Ä–µ—á–∏:")
            bot.register_next_step_handler(call.message, save_meeting, selected_datetime)
        else:
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –≤—Å—Ç—Ä–µ—á–∏
            meeting_index = int(meeting_status)
            reminders = reminder_system.get_reminders(str(call.message.chat.id))
            if 0 <= meeting_index < len(reminders):
                reminder = reminders[meeting_index]
                reminder['time'] = selected_datetime.isoformat()
                reminder_system.save_reminders()
                bot.send_message(
                    call.message.chat.id,
                    f"‚úÖ –í—Ä–µ–º—è –≤—Å—Ç—Ä–µ—á–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ {selected_datetime.strftime('%d.%m.%Y %H:%M')}"
                )
            else:
                bot.send_message(call.message.chat.id, "‚ùå –û—à–∏–±–∫–∞: –≤—Å—Ç—Ä–µ—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
    except Exception as e:
        bot.send_message(call.message.chat.id, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")

def save_meeting(message, selected_datetime):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤—Å—Ç—Ä–µ—á–∏."""
    reminder_system.add_reminder(str(message.chat.id), message.text, selected_datetime)
    bot.send_message(
        message.chat.id,
        f"‚úÖ –í—Å—Ç—Ä–µ—á–∞ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞ –Ω–∞ {selected_datetime.strftime('%d.%m.%Y %H:%M')}\n"
        f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {message.text}"
    )

@bot.message_handler(func=lambda message: message.text == "üìã –ú–æ–∏ –≤—Å—Ç—Ä–µ—á–∏")
def show_meetings(message):
    """–ü–æ–∫–∞–∑ —Å–ø–∏—Å–∫–∞ –≤—Å—Ç—Ä–µ—á."""
    chat_id = str(message.chat.id)
    print(f"–¢–µ–∫—É—â–∏–π ID —á–∞—Ç–∞: {chat_id}")
    print(f"–í—Å–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {reminder_system.reminders}")
    
    reminders = reminder_system.get_reminders(chat_id)
    if not reminders:
        bot.send_message(message.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –≤—Å—Ç—Ä–µ—á.")
        return
    
    response = "üìã –í–∞—à–∏ –≤—Å—Ç—Ä–µ—á–∏:\n\n"
    for i, reminder in enumerate(reminders, 1):
        event_time = datetime.fromisoformat(reminder['time'])
        response += f"{i}. {event_time.strftime('%d.%m.%Y %H:%M')} - {reminder['text']}\n"
    
    bot.send_message(message.chat.id, response)

@bot.message_handler(func=lambda message: message.text == "üß† –ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π —Ñ–∞–∫—Ç")
def send_fact(message):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–ª—É—á–∞–π–Ω–æ–≥–æ –Ω–∞—É—á–Ω–æ–≥–æ —Ñ–∞–∫—Ç–∞."""
    fact = random.choice(SCIENTIFIC_FACTS)
    bot.send_message(message.chat.id, fact)

@bot.message_handler(func=lambda message: message.text == "üí± –û–±–º–µ–Ω –≤–∞–ª—é—Ç")
def exchange_start(message):
    """–ù–∞—á–∞–ª–æ –æ–±–º–µ–Ω–∞ –≤–∞–ª—é—Ç."""
    markup = tg_types.InlineKeyboardMarkup(row_width=2)
    for currency in CURRENCIES:
        markup.add(tg_types.InlineKeyboardButton(
            currency,
            callback_data=f'from_{currency}'
        ))
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –∏—Å—Ö–æ–¥–Ω—É—é –≤–∞–ª—é—Ç—É:", reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data.startswith('from_'))
def select_from_currency(call):
    """–í—ã–±–æ—Ä –∏—Å—Ö–æ–¥–Ω–æ–π –≤–∞–ª—é—Ç—ã."""
    from_currency = call.data.split('_')[1]
    markup = tg_types.InlineKeyboardMarkup(row_width=2)
    for currency in CURRENCIES:
        if currency != from_currency:
            markup.add(tg_types.InlineKeyboardButton(
                currency,
                callback_data=f'to_{from_currency}_{currency}'
            ))
    bot.edit_message_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ü–µ–ª–µ–≤—É—é –≤–∞–ª—é—Ç—É:",
        call.message.chat.id,
        call.message.message_id,
        reply_markup=markup
    )

@bot.callback_query_handler(func=lambda call: call.data.startswith('to_'))
def select_to_currency(call):
    """–í—ã–±–æ—Ä —Ü–µ–ª–µ–≤–æ–π –≤–∞–ª—é—Ç—ã."""
    _, from_currency, to_currency = call.data.split('_')
    bot.edit_message_text(
        f"–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –≤ {from_currency}:",
        call.message.chat.id,
        call.message.message_id
    )
    bot.register_next_step_handler(
        call.message,
        process_conversion,
        from_currency,
        to_currency
    )

def process_conversion(message, from_currency, to_currency):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤–∞–ª—é—Ç."""
    try:
        amount = float(message.text.replace(',', '.'))
        url = f"https://v6.exchangerate-api.com/v6/{EXCHANGE_API_KEY}/pair/{from_currency}/{to_currency}/{amount}"
        response = requests.get(url).json()
        
        if response.get('result') == 'success':
            result = response['conversion_result']
            rate = response['conversion_rate']
            bot.send_message(
                message.chat.id,
                f"üí± –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è:\n"
                f"{amount:.2f} {from_currency} = {result:.2f} {to_currency}\n"
                f"–ö—É—Ä—Å: 1 {from_currency} = {rate:.4f} {to_currency}"
            )
        else:
            bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫—É—Ä—Å–∞ –≤–∞–ª—é—Ç.")
    except ValueError:
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.")
    except Exception as e:
        bot.send_message(message.chat.id, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")

@bot.message_handler(commands=['edit'])
def edit_meetings(message):
    """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å—Ç—Ä–µ—á."""
    reminders = reminder_system.get_reminders(str(message.chat.id))
    if not reminders:
        bot.send_message(message.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –≤—Å—Ç—Ä–µ—á –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.")
        return
    
    markup = tg_types.InlineKeyboardMarkup(row_width=1)
    for i, reminder in enumerate(reminders):
        event_time = datetime.fromisoformat(reminder['time'])
        button_text = f"{event_time.strftime('%d.%m.%Y %H:%M')} - {reminder['text'][:30]}"
        markup.add(tg_types.InlineKeyboardButton(
            button_text,
            callback_data=f'edit_{i}'
        ))
    
    bot.send_message(
        message.chat.id,
        "–í—ã–±–µ—Ä–∏—Ç–µ –≤—Å—Ç—Ä–µ—á—É –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:",
        reply_markup=markup
    )

@bot.callback_query_handler(func=lambda call: call.data.startswith('edit_'))
def edit_meeting_options(call):
    """–í—ã–±–æ—Ä –¥–µ–π—Å—Ç–≤–∏—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Å—Ç—Ä–µ—á–∏."""
    meeting_index = int(call.data.split('_')[1])
    markup = tg_types.InlineKeyboardMarkup(row_width=2)
    markup.add(
        tg_types.InlineKeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å –≤—Ä–µ–º—è", callback_data=f'change_time_{meeting_index}'),
        tg_types.InlineKeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ", callback_data=f'change_desc_{meeting_index}'),
        tg_types.InlineKeyboardButton("–£–¥–∞–ª–∏—Ç—å", callback_data=f'delete_{meeting_index}')
    )
    
    reminders = reminder_system.get_reminders(str(call.message.chat.id))
    if 0 <= meeting_index < len(reminders):
        reminder = reminders[meeting_index]
        event_time = datetime.fromisoformat(reminder['time'])
        bot.edit_message_text(
            f"–í—Å—Ç—Ä–µ—á–∞: {event_time.strftime('%d.%m.%Y %H:%M')}\n"
            f"–û–ø–∏—Å–∞–Ω–∏–µ: {reminder['text']}\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            call.message.chat.id,
            call.message.message_id,
            reply_markup=markup
        )

@bot.callback_query_handler(func=lambda call: call.data.startswith(('change_time_', 'change_desc_', 'delete_')))
def process_meeting_edit(call):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Å—Ç—Ä–µ—á–∏."""
    action = call.data.split('_')[0]
    meeting_index = int(call.data.split('_')[-1])
    
    if action == 'delete':
        reminder_system.delete_reminder(str(call.message.chat.id), meeting_index)
        bot.edit_message_text(
            "‚úÖ –í—Å—Ç—Ä–µ—á–∞ —É–¥–∞–ª–µ–Ω–∞!",
            call.message.chat.id,
            call.message.message_id
        )
    elif action == 'change':
        what = call.data.split('_')[1]
        if what == 'time':
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å –∏–Ω–¥–µ–∫—Å–æ–º –≤—Å—Ç—Ä–µ—á–∏
            calendar_callback.editing_meeting = meeting_index
            now = datetime.now(pytz.timezone("Europe/Moscow"))
            send_calendar(call.message.chat.id, now.year, now.month)
        elif what == 'desc':
            bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –≤—Å—Ç—Ä–µ—á–∏:")
            bot.register_next_step_handler(
                call.message,
                save_new_description,
                meeting_index
            )

def save_new_description(message, meeting_index):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è –≤—Å—Ç—Ä–µ—á–∏."""
    reminders = reminder_system.get_reminders(str(message.chat.id))
    if 0 <= meeting_index < len(reminders):
        reminder = reminders[meeting_index]
        reminder['text'] = message.text
        reminder_system.save_reminders()
        bot.send_message(
            message.chat.id,
            "‚úÖ –û–ø–∏—Å–∞–Ω–∏–µ –≤—Å—Ç—Ä–µ—á–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!"
        )
    else:
        bot.send_message(message.chat.id, "‚ùå –û—à–∏–±–∫–∞: –≤—Å—Ç—Ä–µ—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")

# –ó–∞–ø—É—Å–∫ –ø–æ—Ç–æ–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
reminder_thread = threading.Thread(target=reminder_system.notify_reminders, daemon=True)
reminder_thread.start()

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == "__main__":
    try:
        print("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞...")
        bot.delete_webhook(drop_pending_updates=True)
        time.sleep(1)
        print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
        bot.infinity_polling()
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞: {e}")
