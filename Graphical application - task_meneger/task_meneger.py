import tkinter as tk
from tkinter import ttk, messagebox, scrolledtext
from datetime import datetime
from tkcalendar import Calendar, DateEntry
import json
import webbrowser # –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è —Å—Å—ã–ª–æ–∫ –≤ –±—Ä–∞—É–∑–µ—Ä–µ
from urllib.parse import quote
import winsound
import os
import pandas as pd

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
task_data = {}
responsible_list = {
    "–ò–≤–∞–Ω–æ–≤ –ò.–ò.": "–ú–µ–Ω–µ–¥–∂–µ—Ä",
    "–ü–µ—Ç—Ä–æ–≤ –ü.–ü.": "–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫",
    "–°–∏–¥–æ—Ä–æ–≤ –°.–°.": "–î–∏–∑–∞–π–Ω–µ—Ä",
    "–ö–æ–∑–ª–æ–≤ –ö.–ê.": "–¢–µ—Å—Ç–∏—Ä–æ–≤—â–∏–∫"
}

# –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å –¥–∞–Ω–Ω—ã–º–∏
DATA_FILE = os.path.join(os.path.dirname(__file__), "tasks_and_responsibles.xlsx")
SOUND_ENABLED = True  # –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–≤—É–∫–æ–º

def play_sound():
    """–í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç —Å–∏—Å—Ç–µ–º–Ω—ã–π –∑–≤—É–∫"""
    if SOUND_ENABLED:
        try:
            winsound.PlaySound("SystemAsterisk", winsound.SND_ALIAS)
        except:
            pass

def toggle_sound():
    """–§—É–Ω–∫—Ü–∏—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –∑–≤—É–∫–∞"""
    global SOUND_ENABLED
    SOUND_ENABLED = not SOUND_ENABLED
    if SOUND_ENABLED:
        sound_button.config(text="üîä –ó–≤—É–∫ –í–∫–ª", bg="lightblue")
        show_message("–ó–≤—É–∫", "–ó–≤—É–∫ –≤–∫–ª—é—á–µ–Ω")
    else:
        sound_button.config(text="üîá –ó–≤—É–∫ –í—ã–∫–ª", bg="gray")
        show_message("–ó–≤—É–∫", "–ó–≤—É–∫ –≤—ã–∫–ª—é—á–µ–Ω")

def generate_new_task_id():
    if not task_data:
        return "TASK-0001"
    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —á–∏—Å–ª–æ–≤—É—é —á–∞—Å—Ç—å –∏–∑ ID –∑–∞–¥–∞—á–∏
        max_id = max(int(task_id.split('-')[1]) if '-' in task_id else int(task_id) 
                    for task_id in task_data.keys())
        return f"TASK-{max_id + 1:04d}"
    except ValueError:
        # –ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ ID, –Ω–∞—á–∏–Ω–∞–µ–º —Å TASK-0001
        return "TASK-0001"

def update_position(event=None):
    responsible = responsible_combo.get()
    if responsible in responsible_list:
        position_entry.delete(0, tk.END)
        position_entry.insert(0, responsible_list[responsible])

def update_time():
    current_time = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    time_label.config(text=current_time)
    root.after(1000, update_time)

def select_date(date_var):
    def set_date():
        date_var.set(cal.selection_get().strftime("%Y-%m-%d"))
        top.destroy()

    top = tk.Toplevel(root)
    top.title("–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É")
    cal = Calendar(top, selectmode='day', date_pattern='y-mm-dd')
    cal.pack(padx=10, pady=10)
    ttk.Button(top, text="–í—ã–±—Ä–∞—Ç—å", command=set_date).pack(pady=5)

def show_instructions():
    instruction_window = tk.Toplevel(root)
    instruction_window.title("–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ —Ä–∞–±–æ—Ç–µ —Å –ø—Ä–æ–≥—Ä–∞–º–º–æ–π")
    instruction_window.geometry("800x600")
    instruction_window.configure(background="lightgreen")

    instruction_text = """–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ —Ä–∞–±–æ—Ç–µ —Å Task Manager

1. –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:
   ‚Ä¢ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ (–∫–Ω–æ–ø–∫–∞ "–î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É")
   ‚Ä¢ –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ (–∫–Ω–æ–ø–∫–∞ "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å")
   ‚Ä¢ –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ (–∫–Ω–æ–ø–∫–∞ "–£–¥–∞–ª–∏—Ç—å")
   ‚Ä¢ –û—Ç–º–µ—Ç–∫–∞ –æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ (–∫–Ω–æ–ø–∫–∞ "–û—Ç–º–µ—Ç–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–π")
   ‚Ä¢ –ü–æ–∏—Å–∫ –∑–∞–¥–∞—á (–ø–æ–ª–µ "–ü–æ–∏—Å–∫" –∏ –∫–Ω–æ–ø–∫–∞ "–ù–∞–π—Ç–∏")
   ‚Ä¢ –ü–æ–∏—Å–∫ –ø–æ –¥–∞—Ç–µ (–ø–æ–ª–µ "–î–∞—Ç–∞" –∏ –∫–Ω–æ–ø–∫–∞ "–ü–æ–∏—Å–∫ –ø–æ –¥–∞—Ç–µ")
   ‚Ä¢ –ü–æ–∏—Å–∫ –ø–æ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–º—É (–∫–Ω–æ–ø–∫–∞ "–ü–æ–∏—Å–∫ –ø–æ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–º—É")
   ‚Ä¢ –°–≤—è–∑—å —Å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞–º–∏ (–∫–Ω–æ–ø–∫–∞ "–°–≤—è–∑—å —Å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞–º–∏")

2. –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–¥–∞—á:
   ‚Ä¢ –í —Å–ø–∏—Å–∫–µ –∑–∞–¥–∞—á –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –ø–æ–ª–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:
   ‚Ä¢ –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã —Å—Ç–∞—Ç—É—Å–∞:
     - ‚úì - –∑–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞
     - ‚ñ≤ - –∑–∞–¥–∞—á–∞ –≤ —Ä–∞–±–æ—Ç–µ
     - ‚ùó - —Å—Ä–æ—á–Ω–∞—è –∑–∞–¥–∞—á–∞
   ‚Ä¢ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–¥–∞—á–µ:
     - ID –∑–∞–¥–∞—á–∏
     - –ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏
     - –§–ò–û –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ
     - –î–æ–ª–∂–Ω–æ—Å—Ç—å
     - –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è
     - –î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞
     - –î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è
     - –î–∞—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è

3. –¶–≤–µ—Ç–æ–≤–∞—è –∏–Ω–¥–∏–∫–∞—Ü–∏—è:
   ‚Ä¢ –°–≤–µ—Ç–ª–æ-–∑–µ–ª–µ–Ω—ã–π —Ñ–æ–Ω - –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏
   ‚Ä¢ –°–≤–µ—Ç–ª–æ-—Ä–æ–∑–æ–≤—ã–π —Ñ–æ–Ω - —Å—Ä–æ—á–Ω—ã–µ –∑–∞–¥–∞—á–∏

4. –î–æ–±–∞–≤–ª–µ–Ω–∏–µ/–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏:
   ‚Ä¢ –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏
   ‚Ä¢ –í—ã–±–µ—Ä–∏—Ç–µ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–∑ —Å–ø–∏—Å–∫–∞ (–¥–æ–ª–∂–Ω–æ—Å—Ç—å –æ–±–Ω–æ–≤–∏—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏)
   ‚Ä¢ –£–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—ã –Ω–∞—á–∞–ª–∞ –∏ –æ–∫–æ–Ω—á–∞–Ω–∏—è
   ‚Ä¢ –ü—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –æ—Ç–º–µ—Ç—å—Ç–µ "–°—Ä–æ—á–Ω–∞—è –∑–∞–¥–∞—á–∞"

5. –ü–æ–∏—Å–∫ –∑–∞–¥–∞—á:
   ‚Ä¢ –ü–æ —Ç–µ–∫—Å—Ç—É: –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –≤ –ø–æ–ª–µ –ø–æ–∏—Å–∫–∞ (–∏—â–µ—Ç –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –∏ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–º—É)
   ‚Ä¢ –ü–æ ID: –≤–≤–µ–¥–∏—Ç–µ ID –∑–∞–¥–∞—á–∏ –≤ –ø–æ–ª–µ –ø–æ–∏—Å–∫–∞
   ‚Ä¢ –ü–æ –¥–∞—Ç–µ: –≤—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –∏ –Ω–∞–∂–º–∏—Ç–µ "–ü–æ–∏—Å–∫ –ø–æ –¥–∞—Ç–µ"
   ‚Ä¢ –ü–æ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–º—É: –Ω–∞–∂–º–∏—Ç–µ "–ü–æ–∏—Å–∫ –ø–æ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–º—É"

6. –°–≤—è–∑—å —Å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞–º–∏:
   ‚Ä¢ Email: a@yandex.ru
   ‚Ä¢ –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã –ø–æ–¥–¥–µ—Ä–∂–∫–∏: –ü–Ω-–ü—Ç —Å 9:00 –¥–æ 18:00 (–ú–°–ö)
   ‚Ä¢ –°–ø–æ—Å–æ–±—ã —Å–≤—è–∑–∏:
     - –ü–æ—á—Ç–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç
     - –ü—Ä–æ–≤–æ–¥–Ω–∏–∫ (—Å–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–∞)
     - Telegram
     - WhatsApp

7. –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ:
   ‚Ä¢ –í—Å–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è
   ‚Ä¢ –ó–≤—É–∫–æ–≤—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –º–æ–∂–Ω–æ –≤–∫–ª—é—á–∏—Ç—å/–æ—Ç–∫–ª—é—á–∏—Ç—å
   ‚Ä¢ –ó–∞–¥–∞—á–∏ –º–æ–∂–Ω–æ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ —Ä–∞–∑–Ω—ã–º –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º"""

    instruction_text_widget = scrolledtext.ScrolledText(instruction_window, wrap=tk.WORD, 
                                                      width=80, height=30, bg="white")
    instruction_text_widget.pack(padx=10, pady=10)
    instruction_text_widget.insert(tk.END, instruction_text)
    instruction_text_widget.configure(state='disabled')

    tk.Button(instruction_window, text="–ó–∞–∫—Ä—ã—Ç—å", command=instruction_window.destroy,
              bg="pink", width=20).pack(pady=10)

def show_message(title, message, message_type="info", parent=None):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —É—á–µ—Ç–æ–º –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∑–≤—É–∫–∞"""
    # –í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º –∑–≤—É–∫ –¥–ª—è –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π, –∫—Ä–æ–º–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–π
    if message_type != "confirm":
        play_sound()
    
    dialog = tk.Toplevel(parent or root)
    dialog.title(title)
    dialog.geometry("300x150")
    dialog.configure(background="lightgreen")
    
    # –î–µ–ª–∞–µ–º –æ–∫–Ω–æ –º–æ–¥–∞–ª—å–Ω—ã–º
    dialog.transient(parent or root)
    dialog.grab_set()
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    msg_label = tk.Label(dialog, text=message, 
                       wraplength=250,
                       bg="lightgreen",
                       font=("Arial", 10))
    msg_label.pack(pady=20, padx=20)
    
    # –ö–Ω–æ–ø–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è
    close_button = tk.Button(dialog, 
                           text="OK",
                           command=dialog.destroy,
                           bg="lightblue")
    close_button.pack(pady=10)
    
    # –ñ–¥–µ–º –∑–∞–∫—Ä—ã—Ç–∏—è –æ–∫–Ω–∞ –µ—Å–ª–∏ —ç—Ç–æ –æ–∫–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    if message_type == "confirm":
        dialog.result = False
        def on_yes():
            dialog.result = True
            dialog.destroy()
        
        def on_no():
            dialog.result = False
            dialog.destroy()
        
        close_button.pack_forget()
        tk.Button(dialog, text="–î–∞", command=on_yes, bg="lightblue").pack(side=tk.LEFT, padx=20, pady=10)
        tk.Button(dialog, text="–ù–µ—Ç", command=on_no, bg="pink").pack(side=tk.RIGHT, padx=20, pady=10)
        
        dialog.wait_window()
        return dialog.result
    
    return None

def sort_tasks(sort_type):
    """–°–æ—Ä—Ç–∏—Ä—É–µ—Ç –∑–∞–¥–∞—á–∏ –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É –∫—Ä–∏—Ç–µ—Ä–∏—é"""
    tasks_list = list(task_data.items())
    
    if sort_type == "–ü–æ ID":
        return sorted(tasks_list, key=lambda x: x[0])
    elif sort_type == "–ü–æ –¥–∞—Ç–µ —Å–æ–∑–¥–∞–Ω–∏—è":
        return sorted(tasks_list, key=lambda x: x[1].get('created_date', datetime.now()))
    elif sort_type == "–ü–æ –¥–∞—Ç–µ –Ω–∞—á–∞–ª–∞":
        return sorted(tasks_list, key=lambda x: x[1]['start_date'])
    elif sort_type == "–ü–æ –¥–∞—Ç–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è":
        return sorted(tasks_list, key=lambda x: x[1]['end_date'])
    elif sort_type == "–ü–æ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–º—É":
        return sorted(tasks_list, key=lambda x: x[1]['responsible'])
    elif sort_type == "–ü–æ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω–æ—Å—Ç–∏":
        current_date = datetime.now().date()
        def get_overdue_priority(task):
            if task[1].get('completed', False):
                return 3  # –í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ –≤ –∫–æ–Ω—Ü–µ
            days_left = (task[1]['end_date'].date() - current_date).days
            if days_left < 0:
                return 1  # –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ –≤–Ω–∞—á–∞–ª–µ
            return 2  # –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏ –ø–æ—Å–µ—Ä–µ–¥–∏–Ω–µ
        return sorted(tasks_list, key=get_overdue_priority)
    return tasks_list

def refresh_task_list():
    task_listBox.delete(0, tk.END)
    sorted_tasks = sort_tasks(sort_var.get())
    current_date = datetime.now().date()

    for task_id, task_info in sorted_tasks:
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏
        status_symbol = ""
        if task_info.get('urgent', False):
            status_symbol += "‚ùó"
        if task_info.get('completed', False):
            status_symbol += "‚úì"
        else:
            status_symbol += "‚ñ≤"

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–¥–∞—á–µ
        display_text = (
            f"{status_symbol} ID: {task_id} | "
            f"–ó–∞–¥–∞—á–∞: {task_info['task']} | "
            f"–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π: {task_info['responsible']} | "
            f"–î–æ–ª–∂–Ω–æ—Å—Ç—å: {task_info['position']} | "
            f"–°–æ–∑–¥–∞–Ω–æ: {task_info.get('created_date', datetime.now()).strftime('%d.%m.%Y %H:%M')} | "
            f"–ù–∞—á–∞–ª–æ: {task_info['start_date'].strftime('%d.%m.%Y')} | "
            f"–û–∫–æ–Ω—á–∞–Ω–∏–µ: {task_info['end_date'].strftime('%d.%m.%Y')} | "
            f"–ò–∑–º–µ–Ω–µ–Ω–æ: {task_info['last_modified'].strftime('%d.%m.%Y %H:%M')}"
        )

        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ä–æ–∫–∞—Ö
        if task_info.get('completed', False):
            display_text += " (–í—ã–ø–æ–ª–Ω–µ–Ω–æ)"
        else:
            days_diff = (task_info['end_date'].date() - current_date).days
            if days_diff < 0:
                display_text += f" (–ø—Ä–æ—Å—Ä–æ—á–µ–Ω–æ –Ω–∞: {abs(days_diff)} –¥–Ω.)"
            else:
                display_text += f" (–æ—Å—Ç–∞–ª–æ—Å—å: {days_diff} –¥–Ω.)"

        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –≤ —Å–ø–∏—Å–æ–∫
        task_listBox.insert(tk.END, display_text)

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ü–≤–µ—Ç —Ñ–æ–Ω–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞
        if task_info.get('completed', False):
            task_listBox.itemconfig(tk.END, {'bg': 'light green'})
        elif task_info.get('urgent', False):
            task_listBox.itemconfig(tk.END, {'bg': 'light pink'})

def show_task_tooltip(event, info):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—Å–ø–ª—ã–≤–∞—é—â—É—é –ø–æ–¥—Å–∫–∞–∑–∫—É —Å –ø–æ–ª–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∑–∞–¥–∞—á–µ"""
    try:
        index = task_listBox.nearest(event.y)
        if task_listBox.selection_includes(index):
            tooltip = tk.Toplevel()
            tooltip.wm_overrideredirect(True)
            tooltip.geometry(f"+{event.x_root+10}+{event.y_root+10}")
            
            label = tk.Label(tooltip, text=info, justify=tk.LEFT,
                           background="lightyellow", relief='solid', borderwidth=1,
                           font=("Arial", 10))
            label.pack()
            
            def hide_tooltip():
                tooltip.destroy()
            
            tooltip.bind('<Leave>', lambda e: hide_tooltip())
            task_listBox.bind('<Leave>', lambda e: hide_tooltip())
    except:
        pass

def update_id_combobox():
    sorted_ids = sorted(task_data.keys())
    search_id_combo['values'] = sorted_ids

def update_employee_combobox():
    global employee_search_combo
    employee_search_combo['values'] = list(responsible_list.keys())

def clear_fields():
    task_entry.delete(0, tk.END)
    start_date_var.set("")
    end_date_var.set("")
    responsible_combo.set("")
    position_entry.delete(0, tk.END)
    urgent_var.set(False)

    task_id_entry.configure(state="normal")
    task_id_entry.delete(0, tk.END)
    task_id_entry.insert(0, generate_new_task_id())
    task_id_entry.configure(state="readonly")

def save_tasks_to_file(show_message_flag=True):
    try:
        # –°–æ–∑–¥–∞–µ–º DataFrame –¥–ª—è –∑–∞–¥–∞—á
        tasks_df = pd.DataFrame([
            {
                "ID –∑–∞–¥–∞—á–∏": task_id,
                "–ó–∞–¥–∞—á–∞": task["task"],
                "–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞": task["start_date"],
                "–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è": task["end_date"],
                "–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π": task["responsible"],
                "–î–æ–ª–∂–Ω–æ—Å—Ç—å": task["position"],
                "–°—Ä–æ—á–Ω–æ": "–î–∞" if task.get("urgent", False) else "–ù–µ—Ç",
                "–í—ã–ø–æ–ª–Ω–µ–Ω–æ": "–î–∞" if task.get("completed", False) else "–ù–µ—Ç",
                "–ü–æ—Å–ª–µ–¥–Ω–µ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ": task["last_modified"],
                "–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è": task.get("created_date", datetime.now())
            }
            for task_id, task in task_data.items()
        ])

        # –°–æ–∑–¥–∞–µ–º DataFrame –¥–ª—è –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã—Ö
        responsibles_df = pd.DataFrame([
            {"–§–ò–û": name, "–î–æ–ª–∂–Ω–æ—Å—Ç—å": position}
            for name, position in responsible_list.items()
        ])

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Excel —Å –¥–≤—É–º—è –ª–∏—Å—Ç–∞–º–∏
        with pd.ExcelWriter(DATA_FILE, engine='openpyxl', mode='w') as writer:
            tasks_df.to_excel(writer, sheet_name="–ó–∞–¥–∞—á–∏", index=False)
            responsibles_df.to_excel(writer, sheet_name="–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–µ", index=False)

        if show_message_flag:
            show_message("–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ", "–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ñ–∞–π–ª")
            play_sound()
            
    except Exception as e:
        if show_message_flag:
            show_message("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: {str(e)}", "error")

def load_tasks_from_file(show_message_flag=True):
    try:
        if os.path.exists(DATA_FILE):
            data = pd.read_excel(DATA_FILE, sheet_name="–ó–∞–¥–∞—á–∏")
            responsibles_data = pd.read_excel(DATA_FILE, sheet_name="–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–µ")

            if not {"ID –∑–∞–¥–∞—á–∏", "–ó–∞–¥–∞—á–∞", "–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞", "–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è",
                    "–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π", "–î–æ–ª–∂–Ω–æ—Å—Ç—å", "–°—Ä–æ—á–Ω–æ", "–í—ã–ø–æ–ª–Ω–µ–Ω–æ",
                    "–ü–æ—Å–ª–µ–¥–Ω–µ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ", "–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è"}.issubset(data.columns):
                raise ValueError("–§–∞–π–ª –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –≤—Å–µ—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —Å—Ç–æ–ª–±—Ü–æ–≤")

            task_data.clear()
            responsible_list.clear()

            for _, row in responsibles_data.iterrows():
                responsible_list[row["–§–ò–û"]] = row["–î–æ–ª–∂–Ω–æ—Å—Ç—å"]

            for _, row in data.iterrows():
                task_id = str(row["ID –∑–∞–¥–∞—á–∏"])
                if not task_id.startswith("TASK-"):
                    task_id = f"TASK-{int(task_id):04d}"
                    
                task_data[task_id] = {
                    "task": row["–ó–∞–¥–∞—á–∞"],
                    "start_date": pd.to_datetime(row["–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞"]),
                    "end_date": pd.to_datetime(row["–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è"]),
                    "responsible": row["–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π"],
                    "position": row["–î–æ–ª–∂–Ω–æ—Å—Ç—å"],
                    "completed": row["–í—ã–ø–æ–ª–Ω–µ–Ω–æ"] == "–î–∞",
                    "urgent": row["–°—Ä–æ—á–Ω–æ"] == "–î–∞",
                    "last_modified": pd.to_datetime(row["–ü–æ—Å–ª–µ–¥–Ω–µ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ"]),
                    "created_date": pd.to_datetime(row.get("–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è", datetime.now()))
                }

            responsible_combo["values"] = list(responsible_list.keys())
            update_id_combobox()
            update_employee_combobox()
            refresh_task_list()

            task_id_entry.configure(state="normal")
            task_id_entry.delete(0, tk.END)
            task_id_entry.insert(0, generate_new_task_id())
            task_id_entry.configure(state="readonly")

            if show_message_flag:
                show_message("–ó–∞–≥—Ä—É–∑–∫–∞", "–ó–∞–¥–∞—á–∏ –∏ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ —Ñ–∞–π–ª–∞")
                play_sound()
        else:
            if show_message_flag:
                show_message("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", f"–§–∞–π–ª {DATA_FILE} –Ω–µ –Ω–∞–π–¥–µ–Ω", "warning")
    except Exception as e:
        if show_message_flag:
            show_message("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞: {str(e)}", "error")

def add_task():
    task = task_entry.get()
    responsible = responsible_combo.get()
    position = position_entry.get()

    if not task or not responsible or not position:
        show_message("–û—à–∏–±–∫–∞", "–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è!")
        return

    if not start_date_var.get() or not end_date_var.get():
        show_message("–û—à–∏–±–∫–∞", "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—ã –Ω–∞—á–∞–ª–∞ –∏ –æ–∫–æ–Ω—á–∞–Ω–∏—è!")
        return

    try:
        start_date_obj = datetime.strptime(start_date_var.get(), "%Y-%m-%d")
        end_date_obj = datetime.strptime(end_date_var.get(), "%Y-%m-%d")

        if end_date_obj <= start_date_obj:
            raise ValueError("–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–∑–∂–µ –¥–∞—Ç—ã –Ω–∞—á–∞–ª–∞.")

        current_time = datetime.now()
        task_id = task_id_entry.get()
        task_data[task_id] = {
            "task": task,
            "start_date": start_date_obj,
            "end_date": end_date_obj,
            "responsible": responsible,
            "position": position,
            "completed": False,
            "urgent": urgent_var.get(),
            "created_date": current_time,
            "last_modified": current_time
        }

        refresh_task_list()
        save_tasks_to_file(show_message_flag=False)
        update_id_combobox()
        clear_fields()
        show_message("–£—Å–ø–µ—Ö", "–ó–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞!")
        play_sound()
    except ValueError as e:
        show_message("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –¥–∞—Ç—ã: {e}")

def edit_task():
    selected_indices = task_listBox.curselection()
    if not selected_indices:
        show_message("–û—à–∏–±–∫–∞", "–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–¥–∞—á—É –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
        return

    sorted_tasks = sort_tasks(sort_var.get())
    task_id = sorted_tasks[selected_indices[0]][0]
    task_info = task_data[task_id]

    edit_window = tk.Toplevel(root)
    edit_window.title("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏")
    edit_window.geometry("500x400")
    edit_window.configure(background="lightgreen")

    # –î–µ–ª–∞–µ–º –æ–∫–Ω–æ –º–æ–¥–∞–ª—å–Ω—ã–º
    edit_window.transient(root)
    edit_window.grab_set()

    # –°–æ–∑–¥–∞–µ–º –∏ —Ä–∞–∑–º–µ—â–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    tk.Label(edit_window, text="–ó–∞–¥–∞—á–∞:", bg="lightgreen").grid(row=0, column=0, pady=5, padx=5)
    task_edit = tk.Entry(edit_window, width=50)
    task_edit.insert(0, task_info['task'])
    task_edit.grid(row=0, column=1, columnspan=2, pady=5, padx=5)

    tk.Label(edit_window, text="–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π:", bg="lightgreen").grid(row=1, column=0, pady=5, padx=5)
    responsible_edit = ttk.Combobox(edit_window, values=list(responsible_list.keys()), width=47)
    responsible_edit.set(task_info['responsible'])
    responsible_edit.grid(row=1, column=1, columnspan=2, pady=5, padx=5)

    tk.Label(edit_window, text="–î–æ–ª–∂–Ω–æ—Å—Ç—å:", bg="lightgreen").grid(row=2, column=0, pady=5, padx=5)
    position_var = tk.StringVar(value=task_info['position'])
    position_edit = tk.Entry(edit_window, width=50, textvariable=position_var, state='readonly')
    position_edit.grid(row=2, column=1, columnspan=2, pady=5, padx=5)

    # –§—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–æ–ª–∂–Ω–æ—Å—Ç–∏ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
    def update_position(*args):
        selected_employee = responsible_edit.get()
        if selected_employee in responsible_list:
            position_var.set(responsible_list[selected_employee])

    # –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ—Å—Ç–∏ –∫ –∏–∑–º–µ–Ω–µ–Ω–∏—é –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
    responsible_edit.bind('<<ComboboxSelected>>', update_position)

    tk.Label(edit_window, text="–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞:", bg="lightgreen").grid(row=3, column=0, pady=5, padx=5)
    start_date_edit = DateEntry(edit_window, width=12, background='darkblue',
                             foreground='white', borderwidth=2)
    start_date_edit.set_date(task_info['start_date'].date())
    start_date_edit.grid(row=3, column=1, pady=5, padx=5)

    tk.Label(edit_window, text="–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è:", bg="lightgreen").grid(row=4, column=0, pady=5, padx=5)
    end_date_edit = DateEntry(edit_window, width=12, background='darkblue',
                           foreground='white', borderwidth=2)
    end_date_edit.set_date(task_info['end_date'].date())
    end_date_edit.grid(row=4, column=1, pady=5, padx=5)

    urgent_edit = tk.BooleanVar(value=task_info.get('urgent', False))
    urgent_checkbox = tk.Checkbutton(edit_window, text="–°—Ä–æ—á–Ω–∞—è –∑–∞–¥–∞—á–∞",
                                 variable=urgent_edit, bg="lightgreen")
    urgent_checkbox.grid(row=5, column=1, pady=5, padx=5)

    def save_edit():
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ –ø–æ–ª–µ–π –≤–≤–æ–¥–∞
            new_task = task_edit.get().strip()
            new_responsible = responsible_edit.get().strip()
            new_position = position_var.get()
            new_start_date = datetime.combine(start_date_edit.get_date(), datetime.min.time())
            new_end_date = datetime.combine(end_date_edit.get_date(), datetime.min.time())
            new_urgent = urgent_edit.get()

            if not all([new_task, new_responsible, new_position]):
                show_message("–û—à–∏–±–∫–∞", "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è")
                return

            if new_start_date > new_end_date:
                show_message("–û—à–∏–±–∫–∞", "–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø–æ–∑–∂–µ –¥–∞—Ç—ã –æ–∫–æ–Ω—á–∞–Ω–∏—è")
                return

            # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏
            task_data[task_id].update({
                'task': new_task,
                'responsible': new_responsible,
                'position': new_position,
                'start_date': new_start_date,
                'end_date': new_end_date,
                'urgent': new_urgent,
                'last_modified': datetime.now()
            })

            refresh_task_list()
            save_tasks_to_file()
            edit_window.destroy()
            show_message("–£—Å–ø–µ—Ö", "–ò–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!")
            play_sound()
        except Exception as e:
            show_message("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏: {str(e)}")

    tk.Button(edit_window, text="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è", command=save_edit,
              bg="orange", width=20).grid(row=6, column=1, pady=20, padx=5)

    tk.Button(edit_window, text="–û—Ç–º–µ–Ω–∞", command=edit_window.destroy,
              bg="pink", width=20).grid(row=6, column=0, pady=20, padx=5)

    # –û–±–Ω–æ–≤–ª—è–µ–º –¥–æ–ª–∂–Ω–æ—Å—Ç—å –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –æ–∫–Ω–∞
    update_position()

def delete_task():
    selected_indices = task_listBox.curselection()
    if not selected_indices:
        show_message("–û—à–∏–±–∫–∞", "–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–¥–∞—á—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")
        return

    # –°–æ–∑–¥–∞–µ–º –æ–∫–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    confirm_dialog = tk.Toplevel(root)
    confirm_dialog.title("–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ")
    confirm_dialog.geometry("300x150")
    confirm_dialog.configure(background="lightgreen")
    
    # –î–µ–ª–∞–µ–º –æ–∫–Ω–æ –º–æ–¥–∞–ª—å–Ω—ã–º
    confirm_dialog.transient(root)
    confirm_dialog.grab_set()
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    msg_label = tk.Label(confirm_dialog, 
                       text="–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—É—é –∑–∞–¥–∞—á—É?",
                       wraplength=250,
                       bg="lightgreen",
                       font=("Arial", 10))
    msg_label.pack(pady=20, padx=20)
    
    # –°–æ–∑–¥–∞–µ–º —Ñ—Ä–µ–π–º –¥–ª—è –∫–Ω–æ–ø–æ–∫
    button_frame = tk.Frame(confirm_dialog, bg="lightgreen")
    button_frame.pack(pady=10)
    
    def on_yes():
        sorted_tasks = sort_tasks(sort_var.get())
        task_id = sorted_tasks[selected_indices[0]][0]
        del task_data[task_id]
        refresh_task_list()
        save_tasks_to_file(show_message_flag=False)
        update_id_combobox()
        show_message("–£—Å–ø–µ—Ö", "–ó–∞–¥–∞—á–∞ —É–¥–∞–ª–µ–Ω–∞!")
        play_sound()
        confirm_dialog.destroy()
    
    def on_no():
        confirm_dialog.destroy()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏
    tk.Button(button_frame, 
             text="–î–∞",
             command=on_yes,
             bg="lightblue").pack(side=tk.LEFT, padx=20)
             
    tk.Button(button_frame,
             text="–ù–µ—Ç",
             command=on_no,
             bg="pink").pack(side=tk.LEFT, padx=20)

def mark_task_completed():
    selected_indices = task_listBox.curselection()
    if not selected_indices:
        show_message("–û—à–∏–±–∫–∞", "–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–¥–∞—á—É")
        return

    sorted_tasks = sort_tasks(sort_var.get())
    task_id = sorted_tasks[selected_indices[0]][0]
    
    if task_data[task_id]["completed"]:
        show_message("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", "–ó–∞–¥–∞—á–∞ —É–∂–µ –æ—Ç–º–µ—á–µ–Ω–∞ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–∞—è")
        return
        
    task_data[task_id]["completed"] = True
    task_data[task_id]["last_modified"] = datetime.now()
    
    refresh_task_list()
    save_tasks_to_file()
    show_message("–£—Å–ø–µ—Ö", "–ó–∞–¥–∞—á–∞ –æ—Ç–º–µ—á–µ–Ω–∞ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–∞—è!")
    play_sound()

def search_task_by_id():
    task_id = search_id_var.get()
    if task_id in task_data:
        info = task_data[task_id]
        status = "‚úì –í—ã–ø–æ–ª–Ω–µ–Ω–∞" if info["completed"] else "‚ñ≤ –í —Ä–∞–±–æ—Ç–µ"
        urgent = "‚ùó –î–∞" if info.get("urgent", False) else "–ù–µ—Ç"
        
        # –°–æ–∑–¥–∞–µ–º –æ—Ç–¥–µ–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
        info_window = tk.Toplevel(root)
        info_window.title(f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–¥–∞—á–µ {task_id}")
        info_window.geometry("600x400")
        info_window.configure(background="lightblue")
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π –≤–∏–¥–∂–µ—Ç —Å –ø—Ä–æ–∫—Ä—É—Ç–∫–æ–π
        text_widget = scrolledtext.ScrolledText(info_window, wrap=tk.WORD, 
                                              width=70, height=20,
                                              font=("Arial", 10))
        text_widget.pack(padx=10, pady=10, fill=tk.BOTH, expand=True)
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–¥–∞—á–µ
        task_info = f"""
‚ïî‚ïê‚ïê –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è ‚ïê‚ïê‚ïó
  ID –∑–∞–¥–∞—á–∏: {task_id}
  –ù–∞–∑–≤–∞–Ω–∏–µ: {info['task']}
  
‚ï†‚ïê‚ïê –°—Ç–∞—Ç—É—Å ‚ïê‚ïê‚ï£
  –°–æ—Å—Ç–æ—è–Ω–∏–µ: {status}
  –°—Ä–æ—á–Ω–æ—Å—Ç—å: {urgent}
  
‚ï†‚ïê‚ïê –û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π ‚ïê‚ïê‚ï£
  –§–ò–û: {info['responsible']}
  –î–æ–ª–∂–Ω–æ—Å—Ç—å: {info['position']}
  
‚ï†‚ïê‚ïê –î–∞—Ç—ã ‚ïê‚ïê‚ï£
  –°–æ–∑–¥–∞–Ω–æ: {info.get('created_date', datetime.now()).strftime('%d.%m.%Y %H:%M')}
  –ù–∞—á–∞–ª–æ: {info['start_date'].strftime('%d.%m.%Y')}
  –û–∫–æ–Ω—á–∞–Ω–∏–µ: {info['end_date'].strftime('%d.%m.%Y')}
  –ü–æ—Å–ª–µ–¥–Ω–µ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ: {info['last_modified'].strftime('%d.%m.%Y %H:%M')}
  
‚ï†‚ïê‚ïê –°—Ä–æ–∫–∏ ‚ïê‚ïê‚ï£"""

        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ä–æ–∫–∞—Ö
        current_date = datetime.now().date()
        if info["completed"]:
            task_info += "\n  –ó–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞"
        else:
            days_diff = (info['end_date'].date() - current_date).days
            if days_diff < 0:
                task_info += f"\n  ‚ö† –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–æ –Ω–∞ {abs(days_diff)} –¥–Ω–µ–π"
            else:
                task_info += f"\n  ‚úì –û—Å—Ç–∞–ª–æ—Å—å {days_diff} –¥–Ω–µ–π"
        
        task_info += "\n‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù"
        
        # –í—Å—Ç–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ —Ç–µ–∫—Å—Ç–æ–≤—ã–π –≤–∏–¥–∂–µ—Ç
        text_widget.insert(tk.END, task_info)
        text_widget.configure(state='disabled')  # –î–µ–ª–∞–µ–º —Ç–µ–∫—Å—Ç —Ç–æ–ª—å–∫–æ –¥–ª—è —á—Ç–µ–Ω–∏—è
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –∑–∞–∫—Ä—ã—Ç–∏—è
        tk.Button(info_window, text="–ó–∞–∫—Ä—ã—Ç—å",
                 command=info_window.destroy,
                 bg="pink", width=20).pack(pady=10)
        
        play_sound()
    else:
        show_message("–û—à–∏–±–∫–∞", "–ó–∞–¥–∞—á–∞ —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", "error")

def search_by_responsible():
    search_window = tk.Toplevel(root)
    search_window.title("–ü–æ–∏—Å–∫ –ø–æ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–º—É")
    search_window.geometry("800x400")
    search_window.configure(background="lightblue")

    tk.Label(search_window, text="–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞:", bg="lightblue").pack(pady=5)
    
    global employee_search_combo
    employee_search_combo = ttk.Combobox(search_window, values=list(responsible_list.keys()), width=80)
    employee_search_combo.pack(pady=5)

    def search():
        selected_responsible = employee_search_combo.get()
        if not selected_responsible:
            show_message("–û—à–∏–±–∫–∞", "–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞")
            return

        filtered_tasks = []
        for task_id, task in task_data.items():
            if task['responsible'] == selected_responsible:
                filtered_tasks.append((task_id, task))
        
        if not filtered_tasks:
            show_message("–†–µ–∑—É–ª—å—Ç–∞—Ç", f"–ó–∞–¥–∞—á–∏ –¥–ª—è {selected_responsible} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return
        
        result_window = tk.Toplevel(search_window)
        result_window.title(f"–ó–∞–¥–∞—á–∏ –¥–ª—è {selected_responsible}")
        result_window.geometry("1200x600")
        result_window.configure(background="lightblue")

        result_text = scrolledtext.ScrolledText(result_window, wrap=tk.WORD, 
                                              width=120, height=30, bg="white")
        result_text.pack(padx=10, pady=10)
        
        current_date = datetime.now().date()
        for task_id, task in filtered_tasks:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏
            status_symbol = ""
            if task.get('urgent', False):
                status_symbol += "‚ùó"
            if task.get('completed', False):
                status_symbol += "‚úì"
            else:
                status_symbol += "‚ñ≤"

            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–¥–∞—á–µ
            task_info = (
                f"{status_symbol} ID: {task_id} | "
                f"–ó–∞–¥–∞—á–∞: {task['task']} | "
                f"–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π: {task['responsible']} | "
                f"–î–æ–ª–∂–Ω–æ—Å—Ç—å: {task['position']} | "
                f"–°–æ–∑–¥–∞–Ω–æ: {task.get('created_date', datetime.now()).strftime('%d.%m.%Y %H:%M')} | "
                f"–ù–∞—á–∞–ª–æ: {task['start_date'].strftime('%d.%m.%Y')} | "
                f"–û–∫–æ–Ω—á–∞–Ω–∏–µ: {task['end_date'].strftime('%d.%m.%Y')} | "
                f"–ò–∑–º–µ–Ω–µ–Ω–æ: {task['last_modified'].strftime('%d.%m.%Y %H:%M')}"
            )

            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ä–æ–∫–∞—Ö
            if task.get('completed', False):
                task_info += " (–í—ã–ø–æ–ª–Ω–µ–Ω–æ)"
            else:
                days_diff = (task['end_date'].date() - current_date).days
                if days_diff < 0:
                    task_info += f" (–ø—Ä–æ—Å—Ä–æ—á–µ–Ω–æ –Ω–∞: {abs(days_diff)} –¥–Ω.)"
                else:
                    task_info += f" (–æ—Å—Ç–∞–ª–æ—Å—å: {days_diff} –¥–Ω.)"

            result_text.insert(tk.END, f"{task_info}\n{'-' * 100}\n\n")
        
        result_text.configure(state='disabled')
        
        tk.Button(result_window, text="–ó–∞–∫—Ä—ã—Ç—å", command=result_window.destroy,
                 bg="pink", width=20).pack(pady=10)
        
        play_sound()

    tk.Button(search_window, text="–ù–∞–π—Ç–∏", command=search,
              bg="orange", width=20).pack(pady=10)
    tk.Button(search_window, text="–ó–∞–∫—Ä—ã—Ç—å", command=search_window.destroy,
              bg="pink", width=20).pack(pady=5)

def search_by_end_date():
    search_date = end_date_search_var.get()
    if not search_date:
        show_message("–û—à–∏–±–∫–∞", "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –¥–ª—è –ø–æ–∏—Å–∫–∞")
        return

    try:
        search_date_obj = datetime.strptime(search_date, "%Y-%m-%d").date()
        filtered_tasks = []
        
        for task_id, task in task_data.items():
            task_end_date = task['end_date'].date()
            if task_end_date == search_date_obj:
                filtered_tasks.append((task_id, task))
        
        if not filtered_tasks:
            show_message("–†–µ–∑—É–ª—å—Ç–∞—Ç", f"–ó–∞–¥–∞—á–∏ –Ω–∞ {search_date} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return
        
        result_window = tk.Toplevel(root)
        result_window.title(f"–ó–∞–¥–∞—á–∏ –Ω–∞ {search_date}")
        result_window.geometry("1200x600")
        result_window.configure(background="lightblue")

        result_text = scrolledtext.ScrolledText(result_window, wrap=tk.WORD, 
                                              width=120, height=30, bg="white")
        result_text.pack(padx=10, pady=10)
        
        current_date = datetime.now().date()
        for task_id, task in filtered_tasks:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏
            status_symbol = ""
            if task.get('urgent', False):
                status_symbol += "‚ùó"
            if task.get('completed', False):
                status_symbol += "‚úì"
            else:
                status_symbol += "‚ñ≤"

            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–¥–∞—á–µ
            task_info = (
                f"{status_symbol} ID: {task_id} | "
                f"–ó–∞–¥–∞—á–∞: {task['task']} | "
                f"–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π: {task['responsible']} | "
                f"–î–æ–ª–∂–Ω–æ—Å—Ç—å: {task['position']} | "
                f"–°–æ–∑–¥–∞–Ω–æ: {task.get('created_date', datetime.now()).strftime('%d.%m.%Y %H:%M')} | "
                f"–ù–∞—á–∞–ª–æ: {task['start_date'].strftime('%d.%m.%Y')} | "
                f"–û–∫–æ–Ω—á–∞–Ω–∏–µ: {task['end_date'].strftime('%d.%m.%Y')} | "
                f"–ò–∑–º–µ–Ω–µ–Ω–æ: {task['last_modified'].strftime('%d.%m.%Y %H:%M')}"
            )

            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ä–æ–∫–∞—Ö
            if task.get('completed', False):
                task_info += " (–í—ã–ø–æ–ª–Ω–µ–Ω–æ)"
            else:
                days_diff = (task['end_date'].date() - current_date).days
                if days_diff < 0:
                    task_info += f" (–ø—Ä–æ—Å—Ä–æ—á–µ–Ω–æ –Ω–∞: {abs(days_diff)} –¥–Ω.)"
                else:
                    task_info += f" (–æ—Å—Ç–∞–ª–æ—Å—å: {days_diff} –¥–Ω.)"

            result_text.insert(tk.END, f"{task_info}\n{'-' * 100}\n\n")
        
        result_text.configure(state='disabled')
        
        tk.Button(result_window, text="–ó–∞–∫—Ä—ã—Ç—å", command=result_window.destroy,
                 bg="pink", width=20).pack(pady=10)
        
        play_sound()
    except ValueError:
        show_message("–û—à–∏–±–∫–∞", "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã")

def contact_developers():
    contact_window = tk.Toplevel(root)
    contact_window.title("–°–≤—è–∑—å —Å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞–º–∏")
    contact_window.geometry("400x400")
    contact_window.configure(background="lightblue")
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–∞—è —Å–µ–∫—Ü–∏—è
    info_frame = tk.LabelFrame(contact_window, text="–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", bg="lightblue", padx=10, pady=5)
    info_frame.pack(fill="x", padx=10, pady=5)
    
    info_text = """Email: a@yandex.ru

–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã –ø–æ–¥–¥–µ—Ä–∂–∫–∏:
–ü–Ω-–ü—Ç: 9:00 - 18:00 (–ú–°–ö)"""
    
    info_label = tk.Label(info_frame, text=info_text, bg="lightblue", justify=tk.LEFT)
    info_label.pack(pady=5, padx=5)
    
    # Email —Å–µ–∫—Ü–∏—è
    email_frame = tk.LabelFrame(contact_window, text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å Email", bg="lightblue", padx=10, pady=5)
    email_frame.pack(fill="x", padx=10, pady=5)
    
    tk.Button(email_frame, text="–ü–æ—á—Ç–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç", command=lambda: open_email_client(),
              bg="lightgreen", width=20).pack(side=tk.LEFT, padx=5, pady=5)
    
    tk.Button(email_frame, text="–ü—Ä–æ–≤–æ–¥–Ω–∏–∫", command=lambda: create_email_file(),
              bg="lightgreen", width=20).pack(side=tk.LEFT, padx=5, pady=5)
    
    # –ú–µ—Å—Å–µ–Ω–¥–∂–µ—Ä—ã —Å–µ–∫—Ü–∏—è
    messenger_frame = tk.LabelFrame(contact_window, text="–ù–∞–ø–∏—Å–∞—Ç—å –≤ –º–µ—Å—Å–µ–Ω–¥–∂–µ—Ä", bg="lightblue", padx=10, pady=5)
    messenger_frame.pack(fill="x", padx=10, pady=5)
    
    telegram_button = tk.Button(messenger_frame, text="Telegram", command=lambda: open_telegram(),
                               bg="lightblue", width=20)
    telegram_button.pack(side=tk.LEFT, padx=5, pady=5)
    
    whatsapp_button = tk.Button(messenger_frame, text="WhatsApp", command=lambda: open_whatsapp(),
                               bg="lightgreen", width=20)
    whatsapp_button.pack(side=tk.LEFT, padx=5, pady=5)

    # –ö–Ω–æ–ø–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è
    tk.Button(contact_window, text="–ó–∞–∫—Ä—ã—Ç—å", command=contact_window.destroy,
             bg="pink", width=20).pack(pady=10)

def format_task_info(task_id, task):
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–¥–∞—á–µ —Å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å—Ä–æ–∫–∞—Ö
    current_date = datetime.now().date()
    end_date = task['end_date'].date()
    days_diff = (end_date - current_date).days
    
    status_symbol = ""
    if task.get('urgent', False):
        status_symbol += "‚ùó"
    if task.get('completed', False):
        status_symbol += "‚úì"
    else:
        status_symbol += "‚ñ≤"

    task_info = (
        f"{status_symbol} ID: {task_id} | "
        f"–ó–∞–¥–∞—á–∞: {task['task']} | "
        f"–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π: {task['responsible']} | "
        f"–î–æ–ª–∂–Ω–æ—Å—Ç—å: {task['position']} | "
        f"–°–æ–∑–¥–∞–Ω–æ: {task.get('created_date', datetime.now()).strftime('%d.%m.%Y %H:%M')} | "
        f"–ù–∞—á–∞–ª–æ: {task['start_date'].strftime('%d.%m.%Y')} | "
        f"–û–∫–æ–Ω—á–∞–Ω–∏–µ: {task['end_date'].strftime('%d.%m.%Y')} | "
        f"–ò–∑–º–µ–Ω–µ–Ω–æ: {task['last_modified'].strftime('%d.%m.%Y %H:%M')}"
    )
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ä–æ–∫–∞—Ö
    if task.get('completed', False):
        task_info += "\n–°—Ç–∞—Ç—É—Å: –í—ã–ø–æ–ª–Ω–µ–Ω–æ"
    elif days_diff < 0:
        task_info += f"\n–°—Ç–∞—Ç—É—Å: –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–æ –Ω–∞ {abs(days_diff)} –¥–Ω–µ–π"
    else:
        task_info += f"\n–°—Ç–∞—Ç—É—Å: –î–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ—Å—Ç–∞–ª–æ—Å—å {days_diff} –¥–Ω–µ–π"
    
    return task_info

# –°–æ–∑–¥–∞–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–≥–æ –æ–∫–Ω–∞ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
root = tk.Tk()
root.title("Task Manager")
root.geometry("1200x800")
root.configure(background="lightgreen")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
start_date_var = tk.StringVar(root)
end_date_var = tk.StringVar(root)
urgent_var = tk.BooleanVar()
sort_var = tk.StringVar(root)
sort_var.set("–ü–æ –¥–∞—Ç–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è")
employee_search_var = tk.StringVar(root)
end_date_search_var = tk.StringVar(root)
search_id_var = tk.StringVar(root)

# –°–æ–∑–¥–∞–Ω–∏–µ employee_search_combo –¥–æ –µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
employee_search_combo = ttk.Combobox(root, width=47)
employee_search_combo['values'] = list(responsible_list.keys())

# –°–æ–∑–¥–∞–Ω–∏–µ –º–µ–Ω—é –∏ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
menu_frame = tk.Frame(root, bg="lightgreen")
menu_frame.grid(row=0, column=0, columnspan=3, pady=5, padx=5, sticky="ew")

# –õ–µ–≤–∞—è —á–∞—Å—Ç—å –º–µ–Ω—é
left_menu = tk.Frame(menu_frame, bg="lightgreen")
left_menu.pack(side=tk.LEFT)

# –ö–Ω–æ–ø–∫–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ñ–∞–π–ª–∞–º–∏
tk.Button(left_menu, text=" –ó–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ —Ñ–∞–π–ª–∞", 
         command=lambda: load_tasks_from_file(True), 
         bg="#90EE90", 
         width=20).pack(side=tk.LEFT, padx=5)

tk.Button(left_menu, text=" –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è", 
         command=lambda: save_tasks_to_file(), 
         bg="#90EE90", 
         width=20).pack(side=tk.LEFT, padx=5)

tk.Button(left_menu, text="–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è", 
         command=show_instructions, 
         bg="lightblue", 
         width=20).pack(side=tk.LEFT, padx=5)

tk.Button(left_menu, text="–°–≤—è–∑—å —Å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞–º–∏", 
         command=contact_developers, 
         bg="lightblue", 
         width=20).pack(side=tk.LEFT, padx=5)

# –ü—Ä–∞–≤–∞—è —á–∞—Å—Ç—å –º–µ–Ω—é (–¥–ª—è –≤—Ä–µ–º–µ–Ω–∏)
right_menu = tk.Frame(menu_frame, bg="lightgreen")
right_menu.pack(side=tk.RIGHT)

# –ö–Ω–æ–ø–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–≤—É–∫–æ–º
sound_button = tk.Button(right_menu, 
                        text=" –ó–≤—É–∫ –í–∫–ª",
                        command=toggle_sound,
                        bg="lightblue", 
                        width=12)
sound_button.pack(side=tk.LEFT, padx=5)

time_label = tk.Label(right_menu, text="", bg="lightgreen", font=("Arial", 12))
time_label.pack(side=tk.RIGHT, padx=5)

# –§—Ä–µ–π–º –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –∏ –ø–æ–∏—Å–∫–∞
search_frame = tk.Frame(root, bg="lightgreen")
search_frame.grid(row=14, column=0, columnspan=4, pady=5)

# –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞
tk.Label(search_frame, text="–°–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ:", bg="lightgreen").pack(side=tk.LEFT, padx=5)
sort_combo = ttk.Combobox(search_frame, textvariable=sort_var, 
                         values=["–ü–æ ID", "–ü–æ –¥–∞—Ç–µ —Å–æ–∑–¥–∞–Ω–∏—è", "–ü–æ –¥–∞—Ç–µ –Ω–∞—á–∞–ª–∞", 
                                "–ü–æ –¥–∞—Ç–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è", "–ü–æ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω–æ—Å—Ç–∏", "–ü–æ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–º—É"])
sort_combo.pack(side=tk.LEFT, padx=5)
sort_combo.bind("<<ComboboxSelected>>", lambda e: refresh_task_list())

# –ü–æ–∏—Å–∫ –ø–æ ID
tk.Button(search_frame, text="–ù–∞–π—Ç–∏ –ø–æ ID", command=search_task_by_id,
         bg="orange", width=15).pack(side=tk.LEFT, padx=5)

# –ü–æ–∏—Å–∫ –ø–æ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–º—É
tk.Button(search_frame, text="–ü–æ–∏—Å–∫ –ø–æ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–º—É", command=search_by_responsible,
         bg="orange", width=20).pack(side=tk.LEFT, padx=5)

# –ü–æ–∏—Å–∫ –ø–æ –¥–∞—Ç–µ
tk.Label(search_frame, text="–î–∞—Ç–∞:", bg="lightgreen").pack(side=tk.LEFT, padx=5)
end_date_search_var = tk.StringVar()
end_date_search_entry = DateEntry(search_frame, width=12, textvariable=end_date_search_var,
                                date_pattern='yyyy-mm-dd')
end_date_search_entry.pack(side=tk.LEFT, padx=5)
tk.Button(search_frame, text="–ü–æ–∏—Å–∫ –ø–æ –¥–∞—Ç–µ", command=search_by_end_date,
         bg="orange", width=15).pack(side=tk.LEFT, padx=5)

# –í—Ä–µ–º—è –∏ –ø–æ–∏—Å–∫ –ø–æ ID
tk.Label(root, text="–ü–æ–∏—Å–∫ –∑–∞–¥–∞—á–∏ –ø–æ ID:", bg="lightgreen").grid(row=3, column=0, pady=5, padx=5)
search_id_combo = ttk.Combobox(root, textvariable=search_id_var, width=47)
search_id_combo.grid(row=3, column=1, pady=5, padx=5)
tk.Button(root, text="–ù–∞–π—Ç–∏ –ø–æ ID", command=search_task_by_id, 
         bg="lightblue", width=20).grid(row=3, column=2, pady=5, padx=5)

# –û—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–ª—è –≤–≤–æ–¥–∞
tk.Label(root, text="ID –∑–∞–¥–∞—á–∏:", bg="lightgreen").grid(row=4, column=0, pady=5, padx=5)
task_id_entry = tk.Entry(root, width=50)
task_id_entry.grid(row=4, column=1, pady=5, padx=5)
task_id_entry.configure(state="readonly")

tk.Label(root, text="–ó–∞–¥–∞—á–∞:", bg="lightgreen").grid(row=5, column=0, pady=5, padx=5)
task_entry = tk.Entry(root, width=50)
task_entry.grid(row=5, column=1, pady=5, padx=5)

# –î–∞—Ç—ã
tk.Label(root, text="–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞:", bg="lightgreen").grid(row=6, column=0, pady=5, padx=5)
start_date_entry = tk.Entry(root, textvariable=start_date_var, width=50)
start_date_entry.grid(row=6, column=1, pady=5, padx=5)
tk.Button(root, text="–í—ã–±—Ä–∞—Ç—å", command=lambda: select_date(start_date_var),
         bg="lightblue").grid(row=6, column=2, pady=5, padx=5)

tk.Label(root, text="–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è:", bg="lightgreen").grid(row=7, column=0, pady=5, padx=5)
end_date_entry = tk.Entry(root, textvariable=end_date_var, width=50)
end_date_entry.grid(row=7, column=1, pady=5, padx=5)
tk.Button(root, text="–í—ã–±—Ä–∞—Ç—å", command=lambda: select_date(end_date_var),
         bg="lightblue").grid(row=7, column=2, pady=5, padx=5)

# –û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π –∏ –¥–æ–ª–∂–Ω–æ—Å—Ç—å
tk.Label(root, text="–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π:", bg="lightgreen").grid(row=8, column=0, pady=5, padx=5)
responsible_combo = ttk.Combobox(root, width=47)
responsible_combo.grid(row=8, column=1, pady=5, padx=5)
responsible_combo.bind("<<ComboboxSelected>>", update_position)

tk.Label(root, text="–î–æ–ª–∂–Ω–æ—Å—Ç—å:", bg="lightgreen").grid(row=9, column=0, pady=5, padx=5)
position_entry = tk.Entry(root, width=50)
position_entry.grid(row=9, column=1, pady=5, padx=5)

# –ß–µ–∫–±–æ–∫—Å –¥–ª—è —Å—Ä–æ—á–Ω—ã—Ö –∑–∞–¥–∞—á
urgent_checkbox = tk.Checkbutton(root, text="–°—Ä–æ—á–Ω–∞—è –∑–∞–¥–∞—á–∞", variable=urgent_var, bg="lightgreen")
urgent_checkbox.grid(row=9, column=2, pady=5, padx=5)

# –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á —Å –ø–æ–ª–æ—Å–æ–π –ø—Ä–æ–∫—Ä—É—Ç–∫–∏
task_frame = tk.Frame(root)
task_frame.grid(row=10, column=0, columnspan=3, pady=10, padx=5, sticky="nsew")

# –í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–π —Å–∫—Ä–æ–ª–ª
v_scrollbar = tk.Scrollbar(task_frame)
v_scrollbar.pack(side=tk.RIGHT, fill=tk.Y)

# –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–π —Å–∫—Ä–æ–ª–ª
h_scrollbar = tk.Scrollbar(task_frame, orient=tk.HORIZONTAL)
h_scrollbar.pack(side=tk.BOTTOM, fill=tk.X)

# –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –æ–±–æ–∏—Ö —Å–∫—Ä–æ–ª–ª–æ–≤
task_listBox = tk.Listbox(task_frame, 
                         width=150, 
                         height=20,
                         xscrollcommand=h_scrollbar.set,
                         yscrollcommand=v_scrollbar.set)
task_listBox.pack(side=tk.LEFT, fill=tk.BOTH, expand=True)

# –ü—Ä–∏–≤—è–∑–∫–∞ —Å–∫—Ä–æ–ª–ª–æ–≤ –∫ —Å–ø–∏—Å–∫—É
v_scrollbar.config(command=task_listBox.yview)
h_scrollbar.config(command=task_listBox.xview)

# –§—Ä–µ–π–º –¥–ª—è –∫–Ω–æ–ø–æ–∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
button_frame = tk.Frame(root, bg="lightgreen")
button_frame.grid(row=11, column=0, columnspan=3, pady=10)

# –ü–µ—Ä–≤—ã–π —Ä—è–¥ –∫–Ω–æ–ø–æ–∫
tk.Button(button_frame, text="–î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É", 
         command=add_task, 
         bg="lightblue", width=35).grid(row=0, column=0, pady=5, padx=5)

tk.Button(button_frame, text="–£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É", 
         command=delete_task, 
         bg="pink", width=35).grid(row=0, column=1, pady=5, padx=5)

tk.Button(button_frame, text="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞–¥–∞—á—É", 
         command=edit_task, 
         bg="lightyellow", width=35).grid(row=0, column=2, pady=5, padx=5)

# –í—Ç–æ—Ä–æ–π —Ä—è–¥ –∫–Ω–æ–ø–æ–∫
tk.Button(button_frame, text="–û—Ç–º–µ—Ç–∏—Ç—å –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é", 
         command=mark_task_completed, 
         bg="lightgreen", width=35).grid(row=1, column=0, columnspan=3, pady=5, padx=5)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è –æ–∫–Ω–∞
root.grid_rowconfigure(10, weight=1)
for i in range(3):
    root.grid_columnconfigure(i, weight=1)

# –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
if __name__ == "__main__":
    update_time()
    load_tasks_from_file(show_message_flag=False)
    root.mainloop() 